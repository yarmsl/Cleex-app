import React from 'react'
import PushNotification, {Importance} from 'react-native-push-notification';
import messaging from '@react-native-firebase/messaging';

export const backgroundPushNotifs = () => {
    messaging().setBackgroundMessageHandler(async remoteMessage => console.log(remoteMessage));
}

export const reqIosPermission = async() => {
    await messaging().requestPermission();
}

export const androidChannel = () => {
    PushNotification.createChannel({
            channelId: "default-channel-id", // (required)
            channelName: `Default channel`, // (required)
            channelDescription: "A default channel", // (optional) default: undefined.
            soundName: "default", // (optional) See `soundName` parameter of `localNotification` function
            importance: Importance.HIGH, // (optional) default: Importance.HIGH. Int value of the Android notification importance
            vibrate: true, // (optional) default: true. Creates the default vibration pattern if true.
        });
};

export const localPushesProps = () => {
    return (
        messaging().onMessage(async remoteMessage => {
            PushNotification.localNotification({
                /* Android Only Properties */
                channelId: 'default-channel-id',
                // ticker: 'My Notification Ticker', // (optional)
                autoCancel: true, // (optional) default: true
                largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
                smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
                // bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
                subText: 'none', // (optional) default: none
                // color: 'system default', // (optional) default: system default
                vibrate: true, // (optional) default: true
                vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
                tag: 'some_tag', // (optional) add tag to message
                group: 'group', // (optional) add group to message
                groupSummary: false, // (optional) set this notification to be the group summary for a group of notifications, default: false
                ongoing: false, // (optional) set whether this is an "ongoing" notification
                // actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
                invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
                when: null, // (optionnal) Add a timestamp pertaining to the notification (usually the time the event occurred). For apps targeting Build.VERSION_CODES.N and above, this time is not shown anymore by default and must be opted into by using `showWhen`, default: null.
                usesChronometer: false, // (optional) Show the `when` field as a stopwatch. Instead of presenting `when` as a timestamp, the notification will show an automatically updating display of the minutes and seconds since when. Useful when showing an elapsed time (like an ongoing phone call), default: false.
                timeoutAfter: null, // (optional) Specifies a duration in milliseconds after which this notification should be canceled, if it is not already canceled, default: null
                /* iOS only properties */
                category: remoteMessage.category, // (optional) default: empty string
                // subtitle: remoteMessage.notification.title, // (optional) smaller title below notification title
                /* iOS and Android properties */
                // id: idNotif, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                title: remoteMessage.notification.title, // (optional)
                message: remoteMessage.notification.body, // (required)
                playSound: true, // (optional) default: true
                number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
            });
        })
    )
};

export const getToken = async() => {
    const data = await messaging().getToken();
    return data;
}